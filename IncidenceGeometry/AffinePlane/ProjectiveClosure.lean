import IncidenceGeometry.AffinePlane.Basic

open IncidenceGeometry

namespace AffinePlane

inductive ProjectiveClosure.Point (P L : Type*) [AffinePlane P L] where
  | point_of_affine : P ‚Üí Point P L
  | point_at_infty : (œÄ : Set L) ‚Üí œÄ ‚àà Direction P L ‚Üí Point P L

inductive ProjectiveClosure.Line (P L : Type*) [AffinePlane P L] where
  | line_of_affine : L ‚Üí Line P L
  | line_at_infty : Line P L

open ProjectiveClosure.Point
open ProjectiveClosure.Line

instance (P L : Type*) [AffinePlane P L] :
    IncidenceGeometry (ProjectiveClosure.Point P L) (ProjectiveClosure.Line P L) where
  Incident := fun p l => match p, l with
    | point_of_affine p', line_of_affine l' => p' ùêà l'
    | point_of_affine _, line_at_infty => False
    | point_at_infty œÄ _, line_of_affine l' => l' ‚àà œÄ
    | point_at_infty _ _, line_at_infty => True

noncomputable instance (P L : Type*) [AffinePlane P L] :
    ProjectivePlane (ProjectiveClosure.Point P L) (ProjectiveClosure.Line P L) where
  join := fun p q ‚Ü¶ match p, q with
    | point_of_affine p', point_of_affine q' => line_of_affine (join p' q')
    | point_of_affine p', point_at_infty œÄ hœÄ => line_of_affine (directions_equiv_lines_through_a_point p' ‚ü®œÄ, hœÄ‚ü©)
    | point_at_infty œÄ hœÄ, point_of_affine q' => line_of_affine (directions_equiv_lines_through_a_point q' ‚ü®œÄ, hœÄ‚ü©)
    | point_at_infty œÄ‚ÇÅ hœÄ‚ÇÅ, point_at_infty œÄ‚ÇÇ hœÄ‚ÇÇ => line_at_infty
  join_incident := by
    intro p q hne
    match p, q with
    | point_of_affine p', point_of_affine q' =>
      apply join_incident p' q' (fun h ‚Ü¶ hne (by rw [h]))
    | point_of_affine p', point_at_infty œÄ hœÄ =>
      constructor
      ¬∑ exact (directions_equiv_lines_through_a_point p' ‚ü®œÄ, hœÄ‚ü©).prop
      ¬∑ exact line_of_point_of_direction_mem_direction p' hœÄ
    | point_at_infty œÄ hœÄ, point_of_affine q' =>
      constructor
      ¬∑ exact line_of_point_of_direction_mem_direction q' hœÄ
      ¬∑ exact (directions_equiv_lines_through_a_point q' ‚ü®œÄ, hœÄ‚ü©).prop
    | point_at_infty œÄ‚ÇÅ hœÄ‚ÇÅ, point_at_infty œÄ‚ÇÇ hœÄ‚ÇÇ => trivial
  unique_join := by
    intro p‚ÇÅ p‚ÇÇ l hne hp‚ÇÅl hp‚ÇÇl
    match p‚ÇÅ, p‚ÇÇ, l with
    | point_of_affine p‚ÇÅ', point_of_affine p‚ÇÇ', line_of_affine l' =>
      rw [unique_join p‚ÇÅ' p‚ÇÇ' l' (fun h ‚Ü¶ hne (by rw [h])) hp‚ÇÅl hp‚ÇÇl]
    | point_of_affine p‚ÇÅ', point_of_affine p‚ÇÇ', line_at_infty => exact False.elim hp‚ÇÅl
    | point_of_affine p‚ÇÅ', point_at_infty œÄ hœÄ, line_of_affine l' =>
      simp only [unique_line_of_point_of_direction p‚ÇÅ' hœÄ l' hp‚ÇÅl hp‚ÇÇl]
    | point_of_affine p‚ÇÅ', point_at_infty œÄ hœÄ, line_at_infty => exact False.elim hp‚ÇÅl
    | point_at_infty œÄ hœÄ, point_of_affine p‚ÇÇ', line_of_affine l' =>
      simp only [unique_line_of_point_of_direction p‚ÇÇ' hœÄ l' hp‚ÇÇl hp‚ÇÅl]
    | point_at_infty œÄ hœÄ, point_of_affine p‚ÇÇ', line_at_infty => exact False.elim hp‚ÇÇl
    | point_at_infty œÄ‚ÇÅ hœÄ‚ÇÅ, point_at_infty œÄ‚ÇÇ hœÄ‚ÇÇ, line_of_affine l' =>
      absurd hne
      congr
      rw [‚Üê isparallel_iff_eq_directions (P := P) l' l' hœÄ‚ÇÅ hœÄ‚ÇÇ hp‚ÇÅl hp‚ÇÇl]
      exact Setoid.refl l'
    | point_at_infty œÄ‚ÇÅ hœÄ‚ÇÅ, point_at_infty œÄ‚ÇÇ hœÄ‚ÇÇ, line_at_infty => rfl
  meet := fun l‚ÇÅ l‚ÇÇ ‚Ü¶ match l‚ÇÅ, l‚ÇÇ with
    | line_of_affine l‚ÇÅ', line_of_affine l‚ÇÇ' => by
      by_cases h : (IsParallel P l‚ÇÅ' l‚ÇÇ')
      ¬∑ let ‚ü®œÄ, hœÄ‚ü© := direction_of_line P l‚ÇÅ'
        exact point_at_infty œÄ hœÄ
      ¬∑ exact point_of_affine (meet l‚ÇÅ' l‚ÇÇ' h)
    | line_of_affine l', line_at_infty => let ‚ü®œÄ, hœÄ‚ü© := direction_of_line P l'; point_at_infty œÄ hœÄ
    | line_at_infty, line_of_affine l' => let ‚ü®œÄ, hœÄ‚ü© := direction_of_line P l'; point_at_infty œÄ hœÄ
    | line_at_infty, line_at_infty => point_of_affine (Nonempty.some (exists_point P L))
  meet_incident := by
    intro l‚ÇÅ l‚ÇÇ hne
    match l‚ÇÅ, l‚ÇÇ with
    | line_of_affine l‚ÇÅ', line_of_affine l‚ÇÇ' =>
      by_cases h : (IsParallel P l‚ÇÅ' l‚ÇÇ') <;> simp only [h, reduceDIte]
      ¬∑ constructor
        ¬∑ exact mem_direction_of_self P l‚ÇÅ'
        ¬∑ have := (isparallel_iff_eq_directions l‚ÇÅ' l‚ÇÇ' (direction_of_line P l‚ÇÅ').prop (direction_of_line P l‚ÇÇ').prop
            (mem_direction_of_self P l‚ÇÅ') (mem_direction_of_self P l‚ÇÇ')).mp h
          conv =>
            lhs
            congr
            rw [this]
          exact mem_direction_of_self P l‚ÇÇ'
      ¬∑ exact meet_incident l‚ÇÅ' l‚ÇÇ' h
    | line_of_affine l', line_at_infty =>
      constructor
      ¬∑ exact mem_direction_of_self P l'
      ¬∑ trivial
    | line_at_infty, line_of_affine l' =>
      constructor
      ¬∑ trivial
      ¬∑ exact mem_direction_of_self P l'
    | line_at_infty, line_at_infty => exact False.elim (hne rfl)
  unique_meet := by
    intro l‚ÇÅ l‚ÇÇ p hne hpl‚ÇÅ hpl‚ÇÇ
    match l‚ÇÅ, l‚ÇÇ, p with
    | line_of_affine l‚ÇÅ', line_of_affine l‚ÇÇ', point_of_affine p' =>
      by_cases h : IsParallel P l‚ÇÅ' l‚ÇÇ'
      ¬∑ absurd hne
        congr
        apply h
        use p'
        exact ‚ü®hpl‚ÇÅ, hpl‚ÇÇ‚ü©
      ¬∑ simp only [h, reduceDIte]
        congr
        apply unique_meet l‚ÇÅ' l‚ÇÇ'
        exact ‚ü®hpl‚ÇÅ, hpl‚ÇÇ‚ü©
    | line_of_affine l‚ÇÅ', line_of_affine l‚ÇÇ', point_at_infty œÄ hœÄ =>
      by_cases h : IsParallel P l‚ÇÅ' l‚ÇÇ'
      ¬∑ simp only [h, reduceDIte]
        congr
        exact unique_direction_of_line l‚ÇÅ' hœÄ hpl‚ÇÅ
      ¬∑ rw [isparallel_iff_eq_directions l‚ÇÅ' l‚ÇÇ' hœÄ hœÄ hpl‚ÇÅ hpl‚ÇÇ] at h
        exact False.elim (h rfl)
    | line_of_affine l', line_at_infty, point_of_affine p' => exact False.elim hpl‚ÇÇ
    | line_of_affine l', line_at_infty, point_at_infty œÄ hœÄ =>
      congr
      exact unique_direction_of_line l' hœÄ hpl‚ÇÅ
    | line_at_infty, line_of_affine l', point_of_affine p' => exact False.elim hpl‚ÇÅ
    | line_at_infty, line_of_affine l', point_at_infty œÄ hœÄ =>
      congr
      exact unique_direction_of_line l' hœÄ hpl‚ÇÇ
    | line_at_infty, line_at_infty, point_of_affine p' => exact False.elim hpl‚ÇÅ
    | line_at_infty, line_at_infty, point_at_infty œÄ hœÄ => exact False.elim (hne rfl)
  nondeg' := by
    obtain ‚ü®p', hp'inj, hp'‚ü© := nondeg P L
    sorry
