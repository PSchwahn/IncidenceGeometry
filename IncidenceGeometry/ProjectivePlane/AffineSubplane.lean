import IncidenceGeometry.Defs
import IncidenceGeometry.ProjectivePlane.Basic
import IncidenceGeometry.ProjectivePlane.Counting
import IncidenceGeometry.AffinePlane.ProjectiveClosure
import IncidenceGeometry.AffinePlane.Counting

open IncidenceGeometry
namespace ProjectivePlane

--set_option trace.Meta.synthInstance true

abbrev WithLineRemoved.Point (P L : Type*) [ProjectivePlane P L] (l‚ÇÄ : L) :=
  { p : P // ¬¨ p ùêà l‚ÇÄ }

abbrev WithLineRemoved.Line (P L : Type*) [ProjectivePlane P L] (l‚ÇÄ : L) :=
  { l : L // l ‚â† l‚ÇÄ }

namespace WithLineRemoved

variable (P L : Type*) [ProjectivePlane P L] (l‚ÇÄ : L)

/- instance does not provide concrete values for (semi-)out-params
   AffinePlane (WithLineRemoved.Point P L ?l‚ÇÄ) (WithLineRemoved.Line P L ?l‚ÇÄ) -/
def instPlane : AffinePlane (WithLineRemoved.Point P L l‚ÇÄ) (WithLineRemoved.Line P L l‚ÇÄ) where
  Incident := fun ‚ü®p, _‚ü© ‚ü®l, _‚ü© ‚Ü¶ p ùêà l
  join := sorry
  join_incident := sorry
  unique_join := sorry
  par := sorry
  par_incident := sorry
  par_not_intersect := sorry
  par_unique := sorry
  nondeg' := sorry
  par_id := sorry

theorem order_eq :
    @AffinePlane.order (WithLineRemoved.Point P L l‚ÇÄ) (WithLineRemoved.Line P L l‚ÇÄ) (instPlane _ _ _) =
    ProjectivePlane.order P L := by
  obtain ‚ü®l, hl‚ü© := @AffinePlane.exists_line (WithLineRemoved.Point P L l‚ÇÄ) (WithLineRemoved.Line P L l‚ÇÄ) (instPlane _ _ _)
  rw [‚Üê @AffinePlane.card_points_on_a_line' _ _ (instPlane _ _ _) ‚ü®l, hl‚ü©]
  rw [‚Üê card_points_on_a_line_except_one' (meet l l‚ÇÄ) l (meet_incident _ _ hl).left]
  apply Cardinal.mk_congr
  apply Equiv.ofBijective ?f ?bij
  ¬∑ intro ‚ü®‚ü®p, hp‚ÇÅ‚ü©, hp‚ÇÇ‚ü©
    use p, hp‚ÇÇ
    intro h
    apply hp‚ÇÅ
    rw [h]
    exact (meet_incident  _ _ hl).right
  ¬∑ rw [Function.bijective_iff_existsUnique]
    intro ‚ü®p, hp‚ÇÅ, hp‚ÇÇ‚ü©
    have hp‚ÇÉ : ¬¨ p ùêà l‚ÇÄ := by
      intro h
      apply hp‚ÇÇ
      apply unique_meet _ _ _ hl hp‚ÇÅ h
    use ‚ü®‚ü®p, hp‚ÇÉ‚ü©, hp‚ÇÅ‚ü©
    constructor <;> dsimp
    intro ‚ü®‚ü®q, hq‚ÇÅ‚ü©, hq‚ÇÇ‚ü© hpq
    simp only [Subtype.mk.injEq]
    simp only [Subtype.mk.injEq] at hpq
    assumption

/-- For any projective plane `P`, the projective closure of (`P` minus a line) is isomorphic to `P`. -/
def closure_equiv_self : IncidenceEquiv
    (@AffinePlane.ProjectiveClosure.Point (WithLineRemoved.Point P L l‚ÇÄ) (WithLineRemoved.Line P L l‚ÇÄ) (instPlane _ _ _))
    (@AffinePlane.ProjectiveClosure.Line (WithLineRemoved.Point P L l‚ÇÄ) (WithLineRemoved.Line P L l‚ÇÄ) (instPlane _ _ _))
    P L where
  onPoints := sorry
  onLines := sorry
  preserves_incidence := sorry

/-
TODO: for linear spaces/unique join geometries where every line has at least two points,
an ext theorem for lines: (‚àÄ p, p ùêà l ‚Üî p ùêà l') ‚Üí l = l'
Then we can define incidence morphisms/equivs simply by their action on points.
-/
